import socket, cv2, pickle, struct, threading
import pyaudio

def receive_video(client_socket):
    data = b""
    metadata_size = struct.calcsize("Q")
    while True:
        while len(data) < metadata_size:
            packet = client_socket.recv(4*1024)
            if not packet: break
            data += packet
        packed_msg_size = data[:metadata_size]
        data = data[metadata_size:]
        msg_size = struct.unpack("Q", packed_msg_size)[0]

        while len(data) < msg_size:
            data += client_socket.recv(4*1024)
        frame_data = data[:msg_size]
        data = data[msg_size:]
        frame = pickle.loads(frame_data)
        cv2.imshow("Receiving Video", frame)
        if cv2.waitKey(10) == 13:
            break

def receive_audio(client_socket):
    p = pyaudio.PyAudio()
    stream = p.open(format=pyaudio.paInt16, channels=1, rate=44100, output=True)
    while True:
        data = client_socket.recv(1024)
        stream.write(data)

def connect_to_server():
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    host_ip = '<192.168.100.4>'
    client_socket.connect((host_ip, 9999))
    threading.Thread(target=receive_video, args=(client_socket,)).start()
    threading.Thread(target=receive_audio, args=(client_socket,)).start()

connect_to_server()
